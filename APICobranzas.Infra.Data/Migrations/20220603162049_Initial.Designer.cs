// <auto-generated />
using System;
using APICobranzas.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace APICobranzas.Infra.Data.Migrations
{
    [DbContext(typeof(APIDbContext))]
    [Migration("20220603162049_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("APICobranzas.Domain.Models.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Bancos");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detalle")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EstadoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaAcuse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("FechaEmision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("FechaUltPago")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("ImporteCobrado")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ImporteDebe")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasComputedColumnSql("[ImporteFactura] - [ImporteCobrado]", true);

                    b.Property<decimal>("ImporteFactura")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nro")
                        .HasColumnType("TEXT");

                    b.Property<int>("ObraSocialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Observacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("PuntoventaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("ObraSocialId");

                    b.HasIndex("PuntoventaId");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.FacturaNota", b =>
                {
                    b.Property<int>("FacturaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotaCreditoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FormaPagoId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("FacturaId", "NotaCreditoId");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("NotaCreditoId");

                    b.ToTable("FacturaNota");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.FacturaRecibo", b =>
                {
                    b.Property<int>("FacturaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReciboId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BancoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FormaPagoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NroChequeTransf")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NroReciboTes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("FacturaId", "ReciboId");

                    b.HasIndex("BancoId");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("ReciboId");

                    b.ToTable("FacturaRecibo");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.FormaPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Forma")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FormasPago");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Gestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaContacto")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaProxContacto")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ObraSocialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Observacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("RespuestaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("ObraSocialId");

                    b.HasIndex("RespuestaId");

                    b.ToTable("Gestiones");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.NotaCredito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Anulado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observaciones")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PuntoVentaId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PuntoVentaId");

                    b.ToTable("NotasCredito");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.ObraSocial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CP")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactoAdmin1")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactoAdmin2")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactoGeren1")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactoGeren2")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Cuit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Direccion")
                        .HasColumnType("TEXT");

                    b.Property<string>("HorarioAdmin")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mailgeren")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Observaciones")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Rnos")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tel")
                        .HasColumnType("TEXT");

                    b.Property<uint?>("TelAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("TelGeren")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoPrestadorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TipoPrestadorId");

                    b.ToTable("ObrasSociales");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.PuntoVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Punto")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Numero")
                        .IsUnique();

                    b.ToTable("PuntosVenta");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Recibo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Anulado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Observaciones")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PuntoVentaId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PuntoVentaId");

                    b.ToTable("Recibos");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Respuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detalle")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Respuestas");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.TipoPrestador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TiposPrestador");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AceptaTerminos")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("TEXT");

                    b.Property<string>("Apellido")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaExpiracionTokenReseteo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaReseteoPassword")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaVerificion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<int>("PuntoVentaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rol")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TokenDeVerificacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("TokenReinicio")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PuntoVentaId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "5816c74e-5626-4d6f-9a9e-9ef8009893eb",
                            ConcurrencyStamp = "2d61343e-10ff-47f3-a5b1-fa8701a7a132",
                            Name = "Usuario",
                            NormalizedName = "USUARIO"
                        },
                        new
                        {
                            Id = "d738d8e0-9586-4c5b-ac4e-1138e80a3601",
                            ConcurrencyStamp = "b83693be-2a74-4915-9a4c-6f89824e2c01",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        });
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Factura", b =>
                {
                    b.HasOne("APICobranzas.Domain.Models.Estado", "Estado")
                        .WithMany("Facturas")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APICobranzas.Domain.Models.ObraSocial", "ObraSocial")
                        .WithMany("Facturas")
                        .HasForeignKey("ObraSocialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APICobranzas.Domain.Models.PuntoVenta", "PuntoVenta")
                        .WithMany("Facturas")
                        .HasForeignKey("PuntoventaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("ObraSocial");

                    b.Navigation("PuntoVenta");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.FacturaNota", b =>
                {
                    b.HasOne("APICobranzas.Domain.Models.Factura", "Factura")
                        .WithMany("FacturasNotas")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APICobranzas.Domain.Models.FormaPago", "FormaPago")
                        .WithMany("FacturasNotas")
                        .HasForeignKey("FormaPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APICobranzas.Domain.Models.NotaCredito", "NotaCredito")
                        .WithMany("FacturasNotas")
                        .HasForeignKey("NotaCreditoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factura");

                    b.Navigation("FormaPago");

                    b.Navigation("NotaCredito");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.FacturaRecibo", b =>
                {
                    b.HasOne("APICobranzas.Domain.Models.Banco", "Banco")
                        .WithMany("FacturasRecibos")
                        .HasForeignKey("BancoId")
                        .IsRequired();

                    b.HasOne("APICobranzas.Domain.Models.Factura", "Factura")
                        .WithMany("FacturasRecibos")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APICobranzas.Domain.Models.FormaPago", "FormaPago")
                        .WithMany("FacturasRecibos")
                        .HasForeignKey("FormaPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APICobranzas.Domain.Models.Recibo", "Recibo")
                        .WithMany("FacturasRecibos")
                        .HasForeignKey("ReciboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banco");

                    b.Navigation("Factura");

                    b.Navigation("FormaPago");

                    b.Navigation("Recibo");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Gestion", b =>
                {
                    b.HasOne("APICobranzas.Domain.Models.Usuario", "Account")
                        .WithMany("Gestiones")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APICobranzas.Domain.Models.Contacto", "Contacto")
                        .WithMany("Gestiones")
                        .HasForeignKey("ContactoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APICobranzas.Domain.Models.ObraSocial", "ObraSocial")
                        .WithMany("Gestiones")
                        .HasForeignKey("ObraSocialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APICobranzas.Domain.Models.Respuesta", "Respuesta")
                        .WithMany("Gestiones")
                        .HasForeignKey("RespuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Contacto");

                    b.Navigation("ObraSocial");

                    b.Navigation("Respuesta");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.NotaCredito", b =>
                {
                    b.HasOne("APICobranzas.Domain.Models.PuntoVenta", null)
                        .WithMany("NotasCredito")
                        .HasForeignKey("PuntoVentaId");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.ObraSocial", b =>
                {
                    b.HasOne("APICobranzas.Domain.Models.TipoPrestador", "TipoPrestador")
                        .WithMany("ObrasSociales")
                        .HasForeignKey("TipoPrestadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoPrestador");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Recibo", b =>
                {
                    b.HasOne("APICobranzas.Domain.Models.PuntoVenta", null)
                        .WithMany("Recibos")
                        .HasForeignKey("PuntoVentaId");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Usuario", b =>
                {
                    b.HasOne("APICobranzas.Domain.Models.PuntoVenta", "PuntoVenta")
                        .WithMany("Usuarios")
                        .HasForeignKey("PuntoVentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("APICobranzas.Domain.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AccountId")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Token")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("AccountId");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner("Account")
                                .HasForeignKey("AccountId");

                            b1.Navigation("Account");
                        });

                    b.Navigation("PuntoVenta");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Banco", b =>
                {
                    b.Navigation("FacturasRecibos");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Contacto", b =>
                {
                    b.Navigation("Gestiones");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Estado", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Factura", b =>
                {
                    b.Navigation("FacturasNotas");

                    b.Navigation("FacturasRecibos");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.FormaPago", b =>
                {
                    b.Navigation("FacturasNotas");

                    b.Navigation("FacturasRecibos");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.NotaCredito", b =>
                {
                    b.Navigation("FacturasNotas");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.ObraSocial", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("Gestiones");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.PuntoVenta", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("NotasCredito");

                    b.Navigation("Recibos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Recibo", b =>
                {
                    b.Navigation("FacturasRecibos");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Respuesta", b =>
                {
                    b.Navigation("Gestiones");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.TipoPrestador", b =>
                {
                    b.Navigation("ObrasSociales");
                });

            modelBuilder.Entity("APICobranzas.Domain.Models.Usuario", b =>
                {
                    b.Navigation("Gestiones");
                });
#pragma warning restore 612, 618
        }
    }
}
